/* A slightly wider game container */

/* (A) Dark background and modern font */
html, body {
    margin: 0;
    padding: 0;
    background-color: #121212;
    color: #ffffff;
    font-family: 'Poppins', sans-serif; /* or 'Roboto', sans-serif */
    height: 100%;
  }


body {
  /* 
      A lot of mobile devices have default spacing or “overzoom” 
      – the viewport meta tag plus these zero margins help. 
  */
  margin: 0;
  padding: 0;
}

.game-container {
    width: 100%;
    max-width: 800px; /* was 600px before */
    position: relative;
    margin: 40px auto;
    padding: 20px;
    text-align: center;
    background-color: #1e1e1e;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.6);
  }

/* --------------------------------------------- */
/* 3) Mobile Overrides                           */
/*    Use a media query for narrower screens     */
/* --------------------------------------------- */
@media (max-width: 600px) {
  .game-container {
    padding: 10px; /* or 0 if you want zero spacing inside */
  }
}

  /* The burst bubble */
.magazine-burst {
  position: absolute;
  top: 10px;
  right: -20px;
  width: 100px;
  height: 100px;
  background: #FFC107;
  border: 2px solid #000;
  border-radius: 50%;
  color: #000;
  font-weight: bold;
  font-size: 0.9rem;
  text-align: center;
  transform: rotate(-15deg);
  display: flex;
  align-items: center;
  justify-content: center;
}
  
  
  /* Title styling (optional) */
  .game-container h1 {
    margin-bottom: 20px;
  }
  
  /* (B) Guess History with fixed rows */
#guess-history {
  width: 80%;
  margin: 0 auto 20px auto;
  /* This ensures each row is a set height so layout doesn't jump */
}
.attempt-row {
  margin: 4px 0;
  padding: 6px 8px;
  background: #2a2a2a;
  border-radius: 4px;
  text-align: left; /* so text is left-aligned inside the row */
}
  
  /* Progress bar container remains the same (centered) */
  #progress-wrapper {
    margin: 0 auto 30px auto; /* add bottom margin so there's space below it */
    width: 100%;
    max-width: 600px; /* make it narrower or same as container if you like */
  }
  
  /* Keep these from your existing code */
  #progress-container {
    position: relative;
    width: 100%;
    height: 20px;
    background: #3a3a3a;
    border-radius: 4px;
    overflow: hidden;
  }
  #unlocked-bar {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 0%;
    background: #cadace;
    z-index: 1;
  }
  #current-bar {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 0%;
    background: #1DB954;
    z-index: 2;
  }
  #markers-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 3;
  }
  .slice-marker {
    position: absolute;
    top: 0;
    width: 3px;
    height: 100%;
    background: rgba(255,255,255,0.7);
  }
  
  /* The Play button container */
  .play-container {
    margin-bottom: 20px;
  }
  
  /* Reuse your big green button for the play button */
  .big-play-btn {
    background-color: #1DB954;
    border: none;
    border-radius: 50%;
    width: 60px;
    height: 60px;
    font-size: 1.5rem;
    color: #fff;
    cursor: pointer;
    outline: none;
    transition: transform 0.1s ease;
  }
  .big-play-btn:hover {
    background-color: #1ed760;
  }
  .big-play-btn:active {
    transform: scale(0.95);
  }
  
  /* 
     (E) The guess form:
     We want the input centered, 
     then skip on the left, guess on the right 
  */
/* The guess form is already display: flex & column in your code,
   so we only add position: relative */
   .guess-form {
    position: relative; 
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 20px;
  }
  
  /* The guess input was given width: 60%; 
     so let's match that for the autocomplete. */
  #guess-input {
    width: 80%;
    padding: 8px;
    margin-bottom: 0; /* We'll control spacing via autocomplete container */
    font-size: 1rem;
    border-radius: 4px;
    border: 1px solid #444;
    background: #2a2a2a;
    color: #fff;
  }
  
  /* The container for autocomplete suggestions */
  .autocomplete-items {
    position: absolute;
    top: 48px; /* or however far below the input you want. 
                  Could also do '100%' if your .guess-form 
                  height fits that approach */
    left: 20%; /* Because #guess-input is 60% wide & centered, 
                  you might do left: 20% to line up exactly. 
                  Or you can do left: 50% transform: translateX(-50%) etc. 
                  Or if the input is not exactly centered, you can do left: 0 */
    width: 60%; /* match the input width exactly */
    
    background: #2a2a2a;
    border: 1px solid #444;
    border-radius: 4px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.5);
    z-index: 999;
    max-height: 200px; /* optional: limit height so it won't overflow the screen */
    overflow-y: auto;  /* scroll if there are many suggestions */
  }
  
  /* Each suggestion row */
  .autocomplete-items div {
    padding: 8px 12px;
    cursor: pointer;
    color: #fff;         /* match your theme text color */
    font-size: 0.95rem;  /* slightly smaller than the input if you like */
  }
  
  /* Hover effect for each suggestion */
  .autocomplete-items div:hover {
    background-color: #3a3a3a;
  }
  
  /* If you want a small gap between the input and the suggestions, 
     you can do something like: */
  #autocomplete-list {
    position: absolute;
    top: calc(100% + 4px); /* a small gap below the input */
    left: 0;
    width: 100%;
    margin-top: 4px;
    background-color: #121212;
  }
  
  .action-buttons {
    display: flex;
    width: 80%; /* match input width if you like */
    margin-top: 4px;
    justify-content: space-between; /* skip on left, guess on right */
  }
  
  /* Skip button on the left, guess on the right */
  .skip-btn, .guess-btn {
    padding: 10px 20px;
    font-size: 1rem;
    cursor: pointer;
    border-radius: 4px;
    border: none;
  }
  .skip-btn {
    background: #444; /* dark gray */
    color: #fff;
  }
  .skip-btn:hover {
    background: #555;
  }
  .guess-btn {
    background: #1DB954; /* green */
    color: #fff;
  }
  .guess-btn:hover {
    background: #1ed760;
  }
  
  /* Feedback area stays the same */
  #feedback {
    font-weight: bold;
    margin: 10px 0;
    min-height: 1.5em;
  }
  #guess-history {
    margin-bottom: 20px;
    min-height: 30px; 
    color: #ccc;        /* or #fff if you like */
    font-weight: bold;
  }
  #guess-history p {
    margin: 5px 0;
  }
  
  /* style.css, something simple for your autocomplete box */
.autocomplete-items {
    position: absolute;
    border: 1px solid #ccc;
    background: #fff;
    z-index: 99;
    width: 200px; /* match input width or do something else */
  }
  
  .autocomplete-items div {
    padding: 8px;
    cursor: pointer;
  }
  
  .autocomplete-items div:hover {
    background-color: #e9e9e9;
  }
  
  /* Example spinner (loading) */
.play-button.loading {
  cursor: wait;
  /* Example: show a spinner icon or an inline base64 spinner; up to you. */
  background: url('static/images/loading-gif.gif') center center no-repeat;
  /* Possibly no text if the spinner is purely visual */
  color: transparent;
  border: none;
}

/* Example normal play state */
.play-button.ready {
  cursor: pointer;
  /* Show a play icon. Could be a background image or Unicode char, etc. */
  background: url('static/images/loading-gif.gif') center center no-repeat;
}

/* Example dancing bars while playing */
.play-button.playing {
  cursor: pointer;
  /* Show an animated “equalizer” or “bars.” 
     This could be a GIF or a CSS animation. Example: 
     background: url('/path/to/dancing-bars.gif') center center no-repeat; */
  background: url('static/images/loading-gif.gif') center center no-repeat;
}

/* Add this to your CSS file (e.g., styles.css) */
.toast {
  visibility: hidden;
  min-width: 250px;
  background-color: #333;
  color: #fff;
  text-align: center;
  border-radius: 4px;
  padding: 16px;
  position: fixed;
  z-index: 1000;
  left: 50%;
  bottom: 30px;
  transform: translateX(-50%);
  font-size: 17px;
}

.toast.show {
  visibility: visible;
  animation: fadein 0.5s, fadeout 0.5s 1.5s;
}

@keyframes fadein {
  from { bottom: 0; opacity: 0; }
  to { bottom: 30px; opacity: 1; }
}

@keyframes fadeout {
  from { bottom: 30px; opacity: 1; }
  to { bottom: 0; opacity: 0; }
}
.minimal-card {
  border: 1px solid #ddd;
  padding: 10px;
  display: flex;
  align-items: center;
  max-width: 400px;
  margin: 0 auto;
  background: #fafafa;
}

.minimal-card a {
  text-decoration: none;
  color: inherit;
  display: flex;
  align-items: center;
}

.card-thumbnail {
  width: 80px;
  height: 80px;
  object-fit: cover;
  margin-right: 10px;
}

.card-info {
  display: flex;
  flex-direction: column;
}

.card-title {
  margin: 0;
  font-size: 1.2em;
  color: #1a1a1a; /* Darker text for readability on light background */
}

.card-artist {
  margin: 0;
  color: #333; /* Also dark, but slightly lighter than the title */
}

.share-button {
  background: #1DB954;
  border: none;
  border-radius: 4px;
  padding: 10px 20px;
  color: #fff;
  font-size: 1rem;
  cursor: pointer;
  margin-top: 10px;
  transition: background 0.2s ease;
}
.share-button:hover {
  background: #1ed760;
}

@keyframes pulse {
  0%   { background-color: #062410; } /* dark green */
  50%  { background-color: #117133; } /* light green */
  100% { background-color: #1DB954; }
}

/* .big-play-btn.playing {
  background: url('/static/images/dancing-bars.gif') center center no-repeat;
  background-size: contain;
} */